!function(){angular.module("jsDocNG-Data",[]).constant("$title","Esquire API").constant("$readme",'<h1>Esquire</h1><p>Esquire is a light weight script loader and injection framework for JavaScript.</p>\n<p>It is similar in conecpt to <em>RequireJS</em> but with a few twists:</p>\n<ul>\n<li>Module loading, definition and instantiation is completely separate.</li>\n<li>Many instances of the same injector can be used, module instances will be\nkept separate.</li>\n<li>It plays nicely with <em>Karma</em> for testing...</li>\n</ul>\n<p>See the <a href="http://usrz.github.io/javascript-esquire/">API documentation</a>\nfor more ideas...</p>').constant("$doclets",[{description:"<p>Define a module as available to Esquire</p>",scope:"static",kind:"function",name:"define",memberof:"Esquire",examples:["Define a \"foo\" module requiring two dependencies.\nEsquire.define('foo', ['modA', 'depB'], function(a, b) {\n // 'a' will be an instance of 'modA'\n // 'b' will be an instance of 'depB'\n function Foo(aInstance, bInstance) {\n   // ...\n };\n return new Foo(a, b);\n});"],params:[{type:{names:["string"]},description:"<p>The name of the module to define.</p>",name:"name"},{type:{names:["Array.<string>"]},description:"<p>An array of required module names whose instances will be passed to the <code>constructor(...)</code> method.</p>",name:"dependencies"},{type:{names:["function"]},description:'<p>A function that will be invoked once per each <a href="#!/Esquire"><code>Esquire</code></a> instance. Its return value will be injected in any other module requiring this module as a dependency.</p>',name:"constructor"}],longname:"Esquire.define",$href:"Esquire#define",$id:"T000002R000008"},{description:'<p>Create a new <a href="#!/Esquire"><code>Esquire</code></a> injector instance.</p>',kind:"class",name:"Esquire",classdesc:'<p><a href="#!/Esquire#modules"><code>Modules</code></a> are <em>static</em> and shared amongst all <a href="#!/Esquire"><code>Esquire</code></a> instances (see <a href="#!/Esquire#define"><code>define(...)</code></a>), but their instances not, and are only created <em>once</em> for each <a href="#!/Esquire"><code>Esquire</code></a> instance.</p> <p>A <em>globally shared</em> <a href="#!/Esquire"><code>Esquire</code></a> instance can be used by invoking the <a href="#!/#esquire"><code>esquire(...)</code></a> method, rather than creating a new instance and using the <a href="#!/Esquire#require"><code>require(...)</code></a> call.</p>',longname:"Esquire",scope:"global",$href:"Esquire",$id:"T000002R000024"},{description:"<p>Require instances for the specified module(s).</p>",scope:"instance",kind:"function",memberof:"Esquire",examples:["var esq = new Esquire();\n\nvar foo = esq.require('fooModule');\n// 'foo' will be an instance of 'fooModule'\n\nvar instances = esq.require(['barModule', 'bazModule']);\n// instances[0] will be an instance of 'barModule'\n// instances[1] will be an instance of 'bazModule'"],params:[{type:{names:["Array.<string>","string"]},description:"<p>An array of required module names (or a single module name) whose instance are to be returned.</p>",name:"dependencies"}],name:"require",longname:"Esquire#require",$href:"Esquire#require",$id:"T000002R000033"},{description:"<p>Request injection for the specified modules.</p>",scope:"instance",kind:"function",name:"inject",memberof:"Esquire",examples:["var esq = new Esquire();\nesq.inject(['modA', 'depB'], function(a, b) {\n  // 'a' will be an instance of 'modA'\n  // 'b' will be an instance of 'depB'\n});"],params:[{type:{names:["Array.<string>"]},description:"<p>An array of required module names whose instances will be passed to the <code>callback(...)</code> method.</p>",name:"dependencies"},{type:{names:["function"]},description:"<p>A function that will be called once all module dependencies have been instantiated, with each instance as a parameter.</p>",name:"callback"}],longname:"Esquire#inject",$href:"Esquire#inject",$id:"T000002R000037"},{description:'<p>An unmodifiable dictionary of all modules known by <a href="#!/Esquire"><code>Esquire</code></a>.</p>',scope:"static",kind:"member",name:"modules",memberof:"Esquire",examples:['{\n  "modA": {\n    "dependencies": [ ... ],\n    "constructor": function(...) { ... }\n  },\n  "depB": {\n    "dependencies": [ ... ],\n    "constructor": function(...) { ... }\n  },\n}'],longname:"Esquire.modules",$href:"Esquire#modules",$id:"T000002R000063"},{description:'<p>Request <strong>static</strong> injection for the specified modules.</p> <p>IF a <code>callback</code> function was specified, then this method will behave like <a href="#!/Esquire#inject"><code>inject(...)</code></a>, while if no <code>callback</code> function was given, this method will behave like <code>require(...)</code>, simply returning the required dependencies.</p> <p>Note that this method will use a globally shared <a href="#!/Esquire"><code>Esquire</code></a> instance to create and resolve dependencies.</p>',scope:"global",params:[{type:{names:["array"]},description:"<p>An array of required module names whose instances will be passed to the <code>callback(...)</code> method.</p>",name:"dependencies"},{type:{names:["function"]},optional:!0,description:"<p>A function that will be called once all module dependencies have been instantiated, with each instance as a parameter.</p>",name:"callback"}],name:"esquire",longname:"esquire",kind:"function",$href:"#esquire",$id:"T000002R000077"},{description:"<p>Load an external script and return a <em>then-able</em> <code>Promise</code>.</p>",scope:"static",kind:"function",name:"load",memberof:"Esquire",examples:["Loading external scripts with Esquire\nEsquire.load('scriptA.js', 'scriptB.js')\n .then(\n   function(modules) {\n     // All good: 'modules' will be the same as <a href=\"#!/Esquire#modules\"><code>Esquire.modules</code></a>\n   },\n   function(failure) {\n     // Something bad happend: 'failure' will contain the reason.\n   }\n );"],params:[{type:{names:["string","Array.<string>"]},description:"<p>The scripts to load (a string or arrays thereof).</p>",name:"..."}],longname:"Esquire.load",$href:"Esquire#load",$id:"T000002R000139"}])}();